package main1

import (
	"context"
	"fmt"
	"time"
)

var ctx context.Context
var cancel context.CancelFunc

func main() {
	ctx = context.WithValue(context.Background(), "trace_id", 13483434)
	ctx = context.WithValue(ctx, "session", "sdlkfjkaslfsalfsafjalskfj")

	go cancelTest()
	go valueTest()
	time.Sleep(10 * time.Second)
}

func cancelTest() {
	ctx, cancel = context.WithCancel(ctx)
	//当取数据n == 5时候，执行defer cancel操作
	defer cancel()
	intChan := gen()
	for n := range intChan {
		fmt.Println(n)
		if n == 5 {
			break
		}
	}
}

/*
 创建一个管道chan，启动goroutine
 for循环存数据
**/
func gen() <-chan int {
	dst := make(chan int)
	n := 1
	go func() {
		for {
			select {
			case <-ctx.Done():
				//执行defer cancel操作后，就会执行到该select入库
				fmt.Println("i exited")
				return // returning not to leak the goroutine
			case dst <- n:
				n++
			}
		}
	}()
	return dst
}

func valueTest() {
	ret, ok := ctx.Value("trace_id").(int)
	if !ok {
		ret = 21342423
	}

	fmt.Printf("ret:%d\n", ret)

	s, _ := ctx.Value("session").(string)
	fmt.Printf("session:%s\n", s)
}
